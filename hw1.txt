<!DOCTYPE html>
<html>
<head>
<style>
body {
	overflow: hidden
}
#info {
  position: absolute;
  top: 2%;
  width: 100%;
  padding: 10px;
  text-align: center;
  color: #ffff00;
}

body {
  overflow: hidden;
}

.hide{
  display: none;
}

</style>
</head>

<body>
<p>
HW1
</p>
<div id="info">
  <br>
  <br>
  <br>
  <button id="toggle" class="btn" style="width:20%">Toggle Turn</button>
  <button id="analog" class="btn hide" style="width:20%">Analog</button>
  <button id="quartz" class="btn" style="width:20%">Quartz</button>
  <button id="sector" class="btn hide" style="width:20%">Sector</button>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/107/three.min.js"></script>
<script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
<script src="https://raw.githack.com/jyunming-chen/tutsplus/master/js/KeyboardState.js"></script>
<script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
<script>var renderer, scene, camera,clrcle,cone,circle3,circle2;
var controls, cube,mom,mom2,dad,x=2*Math.PI,on=1;
var angle = 0;  // initialization IMPORTANT!
var keyboard,turn=false,open=1;

init();
animate();
$("#toggle").click(function() {
  turn = !turn;
});
$("#quartz").click(function(){
    open=2;
    $("#sector").removeClass("hide");
    $("#quartz").addClass("hide");
});
$("#sector").click(function(){
    open=3;
    $("#sector").addClass("hide");
    $("#analog").removeClass("hide");
});
$("#analog").click(function(){
    open=1;
    $("#analog").addClass("hide");
    $("#quartz").removeClass("hide");
});
function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds){
      break;
    }
  }
}
function init () {
	
	renderer = new THREE.WebGLRenderer();
	document.body.appendChild (renderer.domElement);
	var width = window.innerWidth;
	var height = window.innerHeight;
	renderer.setSize (width, height);
	
	renderer.setClearColor (0x888888);
	
	scene = new THREE.Scene();
	var grid = new THREE.GridHelper(20,20, 0xaaaa00, 0x333333);
	scene.add (grid);
	var axes = new THREE.AxesHelper (5);
	scene.add (axes);
	
	camera = new THREE.PerspectiveCamera (35, width/height, 1, 100);
	camera.position.y = 16;
	camera.position.z = 40;
	camera.lookAt (new THREE.Vector3(0,0,0));
	
	controls = new THREE.OrbitControls(camera, renderer.domElement);
	
	window.addEventListener('resize', onWindowResize, false);
	///////////////////////////////////////////////////////////////
	var cubeGeometry = new THREE.BoxGeometry (8,0,1);
	var cubeMaterial = new THREE.MeshNormalMaterial();
	cube = new THREE.Mesh (cubeGeometry, cubeMaterial);
  mom=new THREE.Group();
	mom.add (cube);
  cube.position.set(-4,0,0);
	var geometry = new THREE.CircleGeometry( 10, 100);
	var material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );
	circle = new THREE.Mesh( geometry, material );
	scene.add( circle );
  var geometry = new THREE.ConeBufferGeometry( 2, 0, 4 );
  var material = new THREE.MeshNormalMaterial( {color: 0xffff00} );
  cone = new THREE.Mesh( geometry, material );
  cone.position.set(-8,0,0);
  cone.rotation.x=-Math.PI/2;
  mom.add(cone);
  scene.add(mom);
  mom2=new THREE.Group();
  dad=new THREE.Group();
  var geometry = new THREE.CircleGeometry( 10, 100);
	var material = new THREE.MeshBasicMaterial( { color:'white'} );
	circle3 = new THREE.Mesh( geometry, material );
	dad.add( circle3 );
	//keyboard = new KeyboardState();
		
}

function onWindowResize() {
  
	var width = window.innerWidth;
  var height = window.innerHeight;
  camera.aspect = width / height;
  camera.updateProjectionMatrix();
  renderer.setSize(width, height);
	
}

function animate() {
	//keyboard.update();
	
	//if (keyboard.pressed('G'))
  if(turn){
  	if(open==1){ 
    angle += Math.PI*2/60/60;
    }
    else if(open==2){
    	angle +=Math.PI*2/60;
      sleep(1000);
     }
     if(open==3){
      if(angle<=0||angle>Math.PI*2){
      	angle=2*Math.PI;
        dad.add(circle3);
      }
      angle -= Math.PI*2/60/60;
      mom2.remove(circle2);
      var geometry = new THREE.CircleBufferGeometry( 10, 100,76.96,angle);
      var material = new THREE.MeshBasicMaterial( { color: 'gray' } );
      circle2 = new THREE.Mesh( geometry, material );
      mom2.add(circle2);
      mom2.position.set(0,0,1);
      scene.add(mom2);
     }
   }
   if(open==3){
     if(on==1){
     	scene.add(dad);
      angle=2*Math.PI-angle;
     }
     on++;
     scene.remove(mom);
  	 scene.remove(circle);
     scene.add(mom2);
   }
   else if(open==1){
   	 if(on>2){
     	on=1;
      angle=2*Math.PI-angle;
     }
   	 scene.add(mom);
  	 scene.add(circle);
     scene.remove(mom2);
     scene.remove(dad);
   }
   	mom.rotation.z = -(angle+Math.PI/2);
		controls.update();
		requestAnimationFrame(animate);
		render();
   
	
}

function render() {
	
	renderer.render(scene, camera);
	
}
</script>


</body>

</html>